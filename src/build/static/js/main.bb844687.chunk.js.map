{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/ArticleContent.js","Components/ArticlesList.js","pages/NotFoundPage.js","Components/CommentsList.js","Components/UpvotesSection.js","Components/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","pages/ArticlesListPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Fragment","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articlename","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","articleName","useState","setUserName","commentText","setCommentText","addComment","JSON","stringify","headers","for","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","ArticleContent","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","ArticlesListPage","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb844687.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HomePage = () => (\r\n    <React.Fragment>\r\n        <h1>Hello, Welcome To My Blog</h1>\r\n        <p>Hi</p>\r\n        <p>Shalom</p>\r\n    </React.Fragment>  \r\n);\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nconst AboutPage = () => (\r\n    <React.Fragment>\r\n        <h1>About Me</h1>\r\n        <p>Hi</p>\r\n        <p>Shalom</p>\r\n    </React.Fragment>  \r\n);\r\n\r\nexport default AboutPage;","const articles = [\r\n    {\r\n        name: 'learn-java',\r\n        title: \"The Fastest Way To Learn JavaScript\",\r\n        content: [\r\n            \"Welcome To The Fastest JavaScript Tutorial\\n\",\r\n            \"Today We Will Learn How To Develop In Java\\n\"\r\n        ]\r\n    },\r\n    {\r\n        name: 'learn-nodejs',\r\n        title: \"The Fastest Way To Learn Nodejs\",\r\n        content: [\r\n            \"Welcome To The Fastest Nodejs Tutorial\\n\",\r\n            \"Today We Will Learn How To Develop In Nodejs\\n\"\r\n        ]\r\n    },\r\n    {\r\n        name: 'learn-React',\r\n        title: \"The Fastest Way To Learn Reactjs\",\r\n        content: [\r\n            \"Welcome To The Fastest Reactjs Tutorial\\n\",\r\n            \"Today We Will Learn How To Develop In React\\n\"\r\n        ]\r\n    },\r\n]\r\n\r\nexport default articles;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst ArticlesList = ({ articles }) => (\r\n    <React.Fragment>\r\n        {articles.map((article, key) => (\r\n            <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\r\n                <h3>{article.title}</h3>\r\n                <p>{article.content[0].substring(0,30)}...</p>\r\n            </Link>\r\n        ))}\r\n    </React.Fragment>\r\n);\r\n\r\nexport default ArticlesList;","import React from 'react'\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found!</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n\r\nconst CommentsList = ({comments}) => (\r\n    <React.Fragment>\r\n    <h3>Comments:</h3>\r\n    {comments.map((comment,key) => (\r\n        <div className=\"comment\" key={key}>\r\n            <h4>{comment.username}</h4>\r\n            <p>{comment.text}</p>\r\n        </div>\r\n    ))}\r\n    </React.Fragment>\r\n)\r\nexport default CommentsList;","import React from 'react';\r\n\r\nconst UpvotesSection = ({articlename, upvotes, setArticleInfo}) => {\r\n    const upvoteArticle = async () =>{\r\n        const result = await fetch(`/api/articles/${articlename}/upvote`,{\r\n            method: \"POST\",\r\n        })\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n    }\r\nreturn (\r\n    <div id=\"upvotes-section\">\r\n        <button onClick={() =>  upvoteArticle()}>Add Upvotes</button>\r\n        <p>This Post has been upvoted {upvotes} times!</p><br/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default UpvotesSection;\r\n\r\n","import React,{useState} from 'react'\r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    const [username,setUserName] = useState('')\r\n    const [commentText, setCommentText] = useState('')\r\n\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`,{\r\n            method: \"POST\",\r\n            body: JSON.stringify({username, text:commentText}),\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        });\r\n        setUserName('');\r\n        setCommentText('');\r\n        \r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n    }\r\n\r\n    return  (\r\n        <React.Fragment>\r\n            <div id=\"add-comment-form\">\r\n                <h3>Add a Comment</h3>\r\n                <label for=\"userName\">Name:\r\n                    <input type=\"text\" value={username} onChange={(event) => setUserName(event.target.value)}/>\r\n                </label>\r\n                <label>Comment:\r\n                    <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\r\n                </label>\r\n                <button onClick={() => addComment()}>Add Comment</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCommentForm;","import React,{useState, useEffect} from 'react';\r\nimport ArticleContent from './ArticleContent';\r\nimport ArticlesList from '../Components/ArticlesList';\r\nimport NotFoundPage from './NotFoundPage'\r\nimport CommentsList from '../Components/CommentsList'\r\nimport UpvotesSection from '../Components/UpvotesSection';\r\nimport AddCommentForm from '../Components/AddCommentForm';\r\n\r\nconst ArticlePage = ({ match }) => {\r\n\r\n    const name = match.params.name;\r\n    const article = ArticleContent.find(article => article.name === name)\r\n\r\n    const [articleInfo, setArticleInfo] = useState({\r\n        upvotes: 0,\r\n        comments: []\r\n    });\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/api/articles/${name}`)\r\n            const body = await result.json();\r\n            setArticleInfo(body)\r\n        };\r\n        fetchData();\r\n    },[name]);\r\n\r\n    if(!article) return <NotFoundPage></NotFoundPage>\r\n\r\n    const otherArticles =  ArticleContent.filter(article => article.name !== name)\r\n    return (\r\n        <React.Fragment>\r\n            <h1>{article.title}</h1>\r\n            <UpvotesSection articlename={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo}></UpvotesSection>\r\n            {article.content.map((paragraph,key) => (\r\n                <p key={key}>{paragraph}</p>\r\n            ))}\r\n            <CommentsList comments={articleInfo.comments}/>\r\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}></AddCommentForm>\r\n            <hr></hr>\r\n            <h3>Other Articles Suggest For You:</h3>\r\n            <ArticlesList articles={otherArticles} ></ArticlesList>\r\n        </React.Fragment>  \r\n    );\r\n}\r\nexport default ArticlePage;","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/about\">About Me</Link></li>\r\n            <li><Link to=\"/articleslist\">Articles</Link></li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar","import React from 'react';\r\nimport ArticleContent from './ArticleContent';\r\nimport ArticlesList from '../Components/ArticlesList'\r\n\r\nconst ArticlesListPage = () => (\r\n    <React.Fragment>\r\n        <h1>Articles</h1>\r\n        <ArticlesList articles={ArticleContent}></ArticlesList>\r\n    </React.Fragment>  \r\n);\r\n\r\nexport default ArticlesListPage;","import React from 'react';\nimport{\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\nimport HomePage from './pages/HomePage'\nimport AboutPage from './pages/AboutPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar'\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <NavBar/>\n        <div id=\"page-body\">\n        <Switch>\n          <Route path=\"/\" component={HomePage} exact/>\n          <Route path=\"/about\" component={AboutPage}/>\n          <Route path=\"/articleslist\" component={ArticlesListPage}/>\n          <Route path=\"/article/:name\" component={ArticlePage}/>\n          <Route component={NotFoundPage}></Route>\n        </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}